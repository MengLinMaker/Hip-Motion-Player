export var DecisionTreeClassifier = function(lChilds, rChilds, thresholds, indices, classes) {

    this.lChilds = lChilds;
    this.rChilds = rChilds;
    this.thresholds = thresholds;
    this.indices = indices;
    this.classes = classes;

    var findMax = function(nums) {
        var index = 0;
        for (var i = 0; i < nums.length; i++) {
            index = nums[i] > nums[index] ? i : index;
        }
        return index;
    };

    this.predict = function(features, node) {
        node = (typeof node !== 'undefined') ? node : 0;
        if (this.thresholds[node] != -2) {
            if (features[this.indices[node]] <= this.thresholds[node]) {
                return this.predict(features, this.lChilds[node]);
            } else {
                return this.predict(features, this.rChilds[node]);
            }
        }
        return findMax(this.classes[node]);
    };

};

if (typeof process !== 'undefined' && typeof process.argv !== 'undefined') {
    if (process.argv.length - 2 === 39) {

        // Features:
        var features = process.argv.slice(2);

        // Parameters:
        var lChilds = [1, -1, 3, 4, 5, -1, 7, 8, 9, -1, 11, -1, -1, -1, 15, 16, -1, 18, -1, 20, -1, -1, 23, 24, -1, 26, -1, -1, -1, 30, -1, 32, 33, -1, -1, 36, -1, -1, -1];
        var rChilds = [2, -1, 38, 29, 6, -1, 14, 13, 10, -1, 12, -1, -1, -1, 22, 17, -1, 19, -1, 21, -1, -1, 28, 25, -1, 27, -1, -1, -1, 31, -1, 35, 34, -1, -1, 37, -1, -1, -1];
        var thresholds = [0.5192101001739502, -2.0, 11.312633037567139, 0.6389768123626709, 3.6198841333389282, -2.0, -0.31139878928661346, -0.08616157248616219, -0.9638230204582214, -2.0, 0.14289510995149612, -2.0, -2.0, -2.0, 0.31139878928661346, 0.031319938600063324, -2.0, 0.03938867151737213, -2.0, -0.5251520648598671, -2.0, -2.0, -0.08616157248616219, -0.14289510995149612, -2.0, -0.3569413721561432, -2.0, -2.0, -2.0, 0.8037571907043457, -2.0, -0.17176976054906845, 5.301828145980835, -2.0, -2.0, -0.030330916866660118, -2.0, -2.0, -2.0];
        var indices = [8, -2, 37, 17, 37, -2, 19, 27, 30, -2, 1, -2, -2, -2, 19, 18, -2, 29, -2, 31, -2, -2, 27, 1, -2, 11, -2, -2, -2, 29, -2, 18, 36, -2, -2, 30, -2, -2, -2];
        var classes = [[40, 40, 40, 40, 40, 40, 39, 40, 40, 40], [0, 0, 0, 0, 0, 0, 0, 0, 40, 0], [40, 40, 40, 40, 40, 40, 39, 40, 0, 40], [40, 40, 40, 40, 40, 0, 39, 40, 0, 40], [40, 40, 40, 40, 0, 0, 39, 0, 0, 0], [0, 0, 0, 0, 0, 0, 39, 0, 0, 0], [40, 40, 40, 40, 0, 0, 0, 0, 0, 0], [3, 1, 39, 0, 0, 0, 0, 0, 0, 0], [1, 1, 39, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 39, 0, 0, 0, 0, 0, 0, 0], [0, 0, 39, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [37, 39, 1, 40, 0, 0, 0, 0, 0, 0], [34, 38, 1, 1, 0, 0, 0, 0, 0, 0], [0, 38, 0, 0, 0, 0, 0, 0, 0, 0], [34, 0, 1, 1, 0, 0, 0, 0, 0, 0], [34, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [3, 1, 0, 39, 0, 0, 0, 0, 0, 0], [1, 1, 0, 39, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 39, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 39, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 40, 0, 0, 40, 0, 40], [0, 0, 0, 0, 38, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 40, 0, 40], [0, 0, 0, 0, 2, 0, 0, 36, 0, 0], [0, 0, 0, 0, 0, 0, 0, 36, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 40], [0, 0, 0, 0, 0, 0, 0, 0, 0, 40], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 40, 0, 0, 0, 0]];

        // Prediction:
        var clf = new DecisionTreeClassifier(lChilds, rChilds, thresholds, indices, classes);
        var prediction = clf.predict(features);
        console.log(prediction);

    }
}